const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const userSchema = new mongoose.Schema({
    firstName: {
        type: String,
        required: true,
    },
    lastName: {
        type: String,
        required: true,
    },
    email: {
        type: String,
        required: true,
    },
    phone: {
        type: Number,
        required: false,
    },
    password: {
        type: String,
        required: true,
    },
    confirmPassword: {
        type: String,
        required: true,
    },
    date: {
        type: Date,
        default: Date.now 
    },
    messages: [
        {
            message: {
                type: String,
                required:true,
            }
        },
    ],
    tokens: [
        {
            token:{
                type: String,
                required: true,    
            }
        }
    ]
})




//  password Hashing
userSchema.pre('save', async function (next) {
    if(this.isModified('password')){
        this.password = await bcrypt.hash(this.password, 12);
        this.confirmPassword = await bcrypt.hash(this.confirmPassword, 12);
    }
    next();
});




//--------------------------generate token (json web token or jwt)--------------------------------------------------------------------


    //--------------------------to generate secret key use this inbuilt nodejs crypto library----------------
        // const key = require('crypto').randomBytes(64).toString('hex')
        // console.log(key);
    //-------------------------------------------------------------------------------------------------------

userSchema.methods.generateAuthToken = async function(){
    try{
        const token = jwt.sign({ _id: this._id.toString() }, process.env.SECRET_KEY)
        // jwt.sign( payload, secret/privateKey ) 
        // ==> payload should be unique and here _id field is unique and is auto generated by mongodb
        // ==> secret/privateKey --> SECRET_KEY is in config.env file and is 32 chars long with random chars
        // https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs ==> info about jwt.sign() and secretKey
        this.tokens = this.tokens.concat({ token: token }) 
        // 1st token is the field name (inside tokens array) and 2nd token is above variable used to generate jwt
        await this.save();
        return token;
        // returned becuase then we can store it in some variable and verify
    }
    
    catch(err){
        console.log(err); 
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------





//------ADDING MESSAGE DATA TO DATABASE-----------------------------------------------------------------------------------------------------

userSchema.methods.addMessage = async function (message) {
    try{
        this.messages = this.messages.concat({message});
        await this.save();
        return this.messages;
    }
    catch(err){
        console.log(err);
    }
}

//-------------------------------------------------------------------------------------------------------------------------------------




const User = mongoose.model('USER', userSchema);     //inside qotes is the name of collection ('s' is added at the end of the collection name)
module.exports = User;